#!/usr/bin/env python3
import subprocess
import sys
import re
import shutil
import requests
from datetime import datetime

# Add your Vulners API key here
VULNERS_API_KEY = "EUOBLZ5P3VY5KZYUBL2EKHZUTI2REOY2CH6YQL90A52D2V0B6DOHX7MFUF17F4SM"  # <-- insert your actual API key

SERVICES = {
    21:  ("FTP", ["Anonymous access", "Backdoor RCE"], ["nmap", "searchsploit", "metasploit"]),
    22:  ("SSH", ["Weak passwords", "Outdated SSHd"], ["nmap", "hydra", "searchsploit"]),
    25:  ("SMTP", ["Open relay", "Command injection"], ["nmap", "swaks", "metasploit"]),
    80:  ("HTTP", ["XSS, SQLi, RCE", "Outdated Apache/nginx"], ["nmap", "nikto", "burpsuite"]),
    443: ("HTTPS", ["Weak TLS/SSL", "App vulns"], ["sslscan", "owasp zap", "burpsuite"]),
    139: ("NetBIOS", ["Enumerate shares", "SMBv1 enabled"], ["nmap", "smbclient"]),
    445: ("SMB", ["EternalBlue", "Unsecured shares"], ["smbmap", "nmap", "metasploit"]),
    3306: ("MySQL", ["Default creds", "SQLi"], ["sqlmap", "metasploit"]),
    3389: ("RDP", ["BlueKeep", "Weak credentials"], ["nmap", "hydra", "rdesktop"]),
    5432: ("PostgreSQL", ["Default creds", "SQLi"], ["sqlmap", "nmap"]),
    5900: ("VNC", ["No auth", "Weak password"], ["vncviewer", "hydra"]),
    8080: ("HTTP Proxy", ["RCE, SSRF", "Misconfig"], ["nikto", "burpsuite"])
}

SUSPECT_KEYWORDS = ["share", "myshare", "tmp", "usr", "var", "media", "bin"]
SUSPECT_EXTS = [".bak", ".zip", ".rar", ".7z", ".gz", ".secret", ".key", ".pem", ".txt", "password", "passwd"]

def is_tool_installed(tool):
    return shutil.which(tool) is not None

def run_nmap(ip):
    print(f"[+] Scanning {ip} for top 100 ports...")
    cmd = ["nmap", "-sV", "--top-ports", "100", "-Pn", "-oN", "nmap_output.txt", ip]
    subprocess.run(cmd)

def parse_nmap_results():
    results = []
    with open("nmap_output.txt", "r") as f:
        for line in f:
            match = re.match(r"^(\d+)/tcp\s+open\s+([\w\-]+)\s+(.*)", line)
            if match:
                port = int(match.group(1))
                service = match.group(2)
                version = match.group(3).strip()
                results.append((port, service, version))
    return results

def search_cves(service, version):
    query = f"{service} {version}"
    url = "https://vulners.com/api/v3/search/lucene/"
    headers = {"User-Agent": "quickpentest"}
    params = {
        "query": query,
        "apiKey": VULNERS_API_KEY,
        "sort": "cvss.score",
        "size": 3
    }
    try:
        r = requests.get(url, headers=headers, params=params, timeout=10)
        if r.status_code == 200:
            data = r.json()
            results = data.get("data", {}).get("search", [])
            if not results:
                return "  ➤ Aucun CVE trouvé pour cette version. Continuation du scan..."
            output = []
            for item in results:
                cve_id = item.get("id")
                score = item.get("cvss", {}).get("score", "N/A")
                title = item.get("title", "")
                output.append(f"    - {cve_id} (CVSS: {score}) – {title}")
            return "\n".join(output)
        else:
            return "  ➤ Erreur API Vulners. Scan continue..."
    except Exception:
        return "  ➤ Recherche CVE échouée (pas d'accès réseau ?)"

def scan_smb_shares(ip, report_file):
    try:
        smb_list = subprocess.check_output(["smbclient", "-L", f"//{ip}/", "-N"], stderr=subprocess.DEVNULL).decode()
        shares = re.findall(r"^\s*(\w+)\s+Disk", smb_list, re.MULTILINE)

        with open(report_file, "a") as out:
            out.write("\n🔍 Analyse SMB approfondie :\n")

            for share in shares:
                if any(k in share.lower() for k in SUSPECT_KEYWORDS):
                    out.write(f"  📁 Share suspecte : {share}\n")

                    try:
                        list_cmd = f"smbclient //{ip}/{share} -N -c 'prompt OFF; recurse ON; ls'"
                        result = subprocess.check_output(list_cmd, shell=True, stderr=subprocess.DEVNULL).decode()

                        # Try to identify valid files from all lines (skip dirs like '.' '..' etc)
                        for line in result.splitlines():
                            line = line.strip()
                            if not line or line.endswith('/') or "D" in line.split():  # directory
                                continue
                            if any(ext in line.lower() for ext in SUSPECT_EXTS):
                                try:
                                    filename = re.findall(r"\S+\.\S+$", line)[-1]
                                    out.write(f"    - 🧪 Fichier suspect trouvé : {filename}\n")
                                    
                                    # Try download
                                    get_cmd = f"smbclient //{ip}/{share} -N -c 'get \"{filename}\"'"
                                    subprocess.run(get_cmd, shell=True, timeout=10)
                                    out.write(f"      [+] Téléchargé : {filename}\n")
                                except:
                                    out.write(f"      [!] Échec téléchargement : {line}\n")

                    except subprocess.CalledProcessError as e:
                        out.write(f"    [!] Échec listing fichiers pour {share}\n")
    except Exception as e:
        print(f"[!] Erreur analyse SMB : {e}")

def generate_report(ip, results):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("report.txt", "w") as f:
        f.write(f"Rapport de Pentest – Généré automatiquement\n")
        f.write(f"IP Cible: {ip}\nDate: {now}\nDurée estimée: Automatisée\nMéthode: Boîte noire\n\n")
        f.write("PHASE: SCAN + ENUMÉRATION\n--------------------------\n\n")
        for port, service, version in results:
            f.write(f" - Port {port} ({service}) → Version: {version}\n")

        f.write("\nPHASE: VULNÉRABILITÉS POSSIBLES\n--------------------------------\n")
        for port, service, version in results:
            if port in SERVICES:
                name, vulns, tools = SERVICES[port]
                f.write(f"Port {port} ({name})\n")
                f.write(f"  ➤ Version détectée: {version}\n")
                f.write("  ➤ Vulnérabilités possibles:\n")
                for vuln in vulns:
                    f.write(f"    - {vuln}\n")
                f.write("  ➤ Outils recommandés:\n")
                for tool in tools:
                    status = "✔ installé" if is_tool_installed(tool) else "✘ non trouvé"
                    f.write(f"    - {tool} ({status})\n")
                cve_results = search_cves(service, version)
                f.write("  ➤ Résultats CVE :\n")
                f.write(f"{cve_results}\n\n")
        
        # Insert BEFORE Post-Scan Tools Section
        if any(port in [139, 445] for port, _, _ in results):
            f.write("\nPHASE: ANALYSE DES PARTAGES SMB\n----------------------------------------\n")
            scan_smb_shares(ip, "report.txt")
        
        # Continue with POST-SCAN TOOLS
        f.write("\nPHASE: POST-SCAN (si outils disponibles)\n----------------------------------------\n")
        if is_tool_installed("nikto"):
            f.write("[+] Lancement rapide de Nikto sur port 80...\n")
            subprocess.run(["nikto", "-host", f"http://{ip}", "-p", "80"])
        else:
            f.write("✘ nikto non installé. Étape ignorée.\n")

        if is_tool_installed("dirsearch"):
            f.write("[+] Exécution rapide de dirsearch...\n")
            subprocess.run(["dirsearch", "-u", f"http://{ip}:80", "-e", "php,txt,html", "--simple-report=dirsearch_report.txt"])
        else:
            f.write("✘ dirsearch non installé. Étape ignorée.\n")

        if is_tool_installed("gobuster"):
            f.write("[+] Gobuster dir...\n")
            subprocess.run(["gobuster", "dir", "-u", f"http://{ip}", "-w", "/usr/share/wordlists/dirb/common.txt", "-q", "-o", "gobuster_output.txt"])
        else:
            f.write("✘ gobuster non installé. Étape ignorée.\n")

        f.write("\nFIN DU RAPPORT – Vérifiez les téléchargements et exploitez manuellement si nécessaire.\n")

    print("[+] Rapport terminé dans report.txt")

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 quickpentest.py <IP>")
        sys.exit(1)
    ip = sys.argv[1]
    run_nmap(ip)
    results = parse_nmap_results()
    generate_report(ip, results)

if __name__ == "__main__":
    main()
