#!/usr/bin/env python3
import subprocess
import sys
import re
import shutil
from datetime import datetime

SERVICES = {
    21:  ("FTP", ["Anonymous access", "Backdoor RCE"], ["nmap", "searchsploit", "metasploit"]),
    22:  ("SSH", ["Weak passwords", "Outdated SSHd"], ["nmap", "hydra", "searchsploit"]),
    25:  ("SMTP", ["Open relay", "Command injection"], ["nmap", "swaks", "metasploit"]),
    80:  ("HTTP", ["XSS, SQLi, RCE", "Outdated Apache/nginx"], ["nmap", "nikto", "burpsuite"]),
    443: ("HTTPS", ["Weak TLS/SSL", "App vulns"], ["sslscan", "owasp zap", "burpsuite"]),
    139: ("NetBIOS", ["Enumerate shares", "SMBv1 enabled"], ["nmap", "smbclient"]),
    445: ("SMB", ["EternalBlue", "Unsecured shares"], ["smbmap", "nmap", "metasploit"]),
    3306: ("MySQL", ["Default creds", "SQLi"], ["sqlmap", "metasploit"]),
    3389: ("RDP", ["BlueKeep", "Weak credentials"], ["nmap", "hydra", "rdesktop"]),
    5432: ("PostgreSQL", ["Default creds", "SQLi"], ["sqlmap", "nmap"]),
    5900: ("VNC", ["No auth", "Weak password"], ["vncviewer", "hydra"]),
    8080: ("HTTP Proxy", ["RCE, SSRF", "Misconfig"], ["nikto", "burpsuite"])
}

def is_tool_installed(tool):
    return shutil.which(tool) is not None

def run_nmap(ip):
    print(f"[+] Scanning {ip} for top 100 ports...")
    cmd = ["nmap", "-sV", "--top-ports", "100", "-Pn", "-oN", "nmap_output.txt", ip]
    subprocess.run(cmd)

def parse_nmap_results():
    results = []
    with open("nmap_output.txt", "r") as f:
        for line in f:
            match = re.match(r"^(\d+)/tcp\s+open\s+([\w\-]+)\s+(.*)", line)
            if match:
                port = int(match.group(1))
                service = match.group(2)
                version = match.group(3).strip()
                results.append((port, service, version))
    return results

def generate_report(ip, results):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("report.txt", "w") as f:
        f.write(f"Rapport de Pentest – Généré automatiquement\n")
        f.write(f"IP Cible: {ip}\nDate: {now}\nDurée estimée: Automatisée\nMéthode: Boîte noire\n\n")
        f.write("PHASE: SCAN + ENUMÉRATION\n--------------------------\n\n")
        f.write(f"Résultats Nmap:\n")
        for port, service, version in results:
            f.write(f" - Port {port} ({service}) → Version: {version}\n")
        f.write("\n")

        f.write("PHASE: VULNÉRABILITÉS POSSIBLES\n--------------------------------\n")
        for port, service, version in results:
            if port in SERVICES:
                name, vulns, tools = SERVICES[port]
                f.write(f"Port {port} ({name})\n")
                f.write(f"  ➤ Version détectée: {version}\n")
                f.write("  ➤ Vulnérabilités possibles:\n")
                for vuln in vulns:
                    f.write(f"    - {vuln}\n")
                f.write("  ➤ Outils recommandés:\n")
                for tool in tools:
                    if is_tool_installed(tool):
                        f.write(f"    - {tool} (✔ installé)\n")
                    else:
                        f.write(f"    - {tool} (✘ non trouvé)\n")

                if port == 21 and "vsftpd 2.3.4" in version:
                    f.write("  ➤ CVE associé: CVE-2011-2523 (Backdoor RCE)\n")
                elif port == 3389:
                    f.write("  ➤ CVE associé: CVE-2019-0708 (BlueKeep)\n")
                else:
                    f.write("  ➤ Aucun CVE trouvé pour cette version. Continuation du scan...\n")
                f.write("\n")

        f.write("PHASE: POST-SCAN (si outils disponibles)\n----------------------------------------\n")
        if is_tool_installed("nikto"):
            f.write("[+] Lancement rapide de Nikto sur port 80...\n")
            subprocess.run(["nikto", "-host", f"http://{ip}", "-p", "80"])
        else:
            f.write("✘ nikto non installé. Étape ignorée.\n")

        if is_tool_installed("dirsearch"):
            f.write("[+] Exécution rapide de dirsearch (si installé)...\n")
            subprocess.run(["dirsearch", "-u", f"http://{ip}:80", "-e", "php,txt,html", "--simple-report=dirsearch_report.txt"])
        else:
            f.write("✘ dirsearch non installé. Étape ignorée.\n")

        if is_tool_installed("gobuster"):
            f.write("[+] Lancement rapide de gobuster dir...\n")
            subprocess.run(["gobuster", "dir", "-u", f"http://{ip}", "-w", "/usr/share/wordlists/dirb/common.txt", "-q", "-o", "gobuster_output.txt"])
        else:
            f.write("✘ gobuster non installé. Étape ignorée.\n")

        f.write("\nFIN DU RAPPORT – Utilisez ces résultats pour exploiter manuellement avec Burp Suite, Metasploit, etc.\n")

    print("[+] Rapport terminé. Tapez `cat report.txt` pour le lire.")

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 quickpentest.py <IP>")
        sys.exit(1)
    ip = sys.argv[1]
    run_nmap(ip)
    results = parse_nmap_results()
    generate_report(ip, results)

if __name__ == "__main__":
    main()
