#!/usr/bin/env python3
import subprocess
import sys
import re
import shutil
import requests
from datetime import datetime
import os
from alive_progress import alive_bar
from colorama import Fore, Style, init as colorama_init

colorama_init()

DEBUG = True

def debug_print(message):
    if DEBUG:
        print(f"[DEBUG] {message}")

def is_tool_installed(tool):
    return shutil.which(tool) is not None

def is_valid_ip(ip):
    return re.match(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$", ip) is not None

def run_nmap(ip, output_file):
    cmd = ["nmap", "-sV", "--top-ports", "100", "-Pn", "-oN", output_file, ip]
    subprocess.run(cmd)

def parse_nmap_results(nmap_file):
    results = []
    try:
        with open(nmap_file, "r") as f:
            for line in f:
                match = re.match(r"^(\d+)/tcp\s+open\s+([\w\-]+)\s+(.*)", line)
                if match:
                    port = int(match.group(1))
                    service = match.group(2)
                    version = match.group(3).strip()
                    results.append((port, service, version))
    except Exception as e:
        print(f"[!] Error parsing nmap results: {e}")
    return results

def search_cves(service, version):
    return "  ➤ CVE search simulated – (API integration not shown here)."

def generate_report(ip, results, report_file):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(report_file, "w") as f:
        f.write(f"QuickPentest Report – {ip}\n")
        f.write("=" * 50 + "\n")

        f.write(f"Target IP: {ip}\n")
        f.write(f"Date: {now}\n")
        f.write("Method: Black-box\n")
        f.write("Estimated Duration: Automated\n\n")

        f.write("PHASE: SCAN + ENUMERATION\n--------------------------\n")
        for port, service, version in results:
            f.write(f" - Port {port} ({service}) → Version: {version}\n")

        f.write("\nPHASE: POSSIBLE VULNERABILITIES\n--------------------------------\n")

        with alive_bar(len(results), title="Checking CVEs", bar='smooth', spinner='dots_waves', length=20) as bar:
            for port, service, version in results:
                f.write(f"\nPort {port} ({service.upper()})\n")
                f.write(f"  ➤ Detected Version: {version}\n")
                f.write("  ➤ Possible Vulnerabilities: [simulated]...\n")
                f.write("  ➤ CVE Results:\n")
                f.write(f"{search_cves(service, version)}\n")
                bar()

        f.write("\nPHASE: POST-SCAN TOOLS\n----------------------------------------\n")
        if is_tool_installed("nikto") and any(port == 80 for port, _, _ in results):
            f.write("[+] Running Nikto on port 80...\n")
            subprocess.run(["nikto", "-host", f"http://{ip}", "-p", "80"], stdout=f, stderr=subprocess.DEVNULL)
        else:
            f.write("✘ Nikto not installed or port 80 closed. Skipping.\n")

        f.write("\nEND OF REPORT – Verify results and exploit manually if needed.\n")
    print(f"[+] Report completed in {report_file}")

def main():
    if len(sys.argv) < 2:
        print("Usage: python3 quickpentest.py <IP> [--test-smb]")
        sys.exit(1)

    ip = sys.argv[1]
    if not is_valid_ip(ip):
        print("Error: Invalid IP address")
        sys.exit(1)

    now = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"report_{now}.txt"
    nmap_file = f"nmap_output_{now}.txt"

    steps = ["Nmap Scan", "Parse Results", "CVE Checks", "SMB Scan", "Post-Scan Tools", "Finalize Report"]

    with alive_bar(len(steps), title="Pentest Progress", bar='smooth', spinner='dots_waves', length=20) as pbar:
        debug_print("Starting Nmap scan...")
        run_nmap(ip, nmap_file)
        pbar.text = "Running Nmap"
        pbar()

        debug_print("Parsing scan results...")
        results = parse_nmap_results(nmap_file)
        pbar.text = "Parsing Results"
        pbar()

        debug_print("Generating full report...")
        generate_report(ip, results, report_file)
        pbar.text = "Checking CVEs and Writing Report"
        pbar()

        pbar.text = "SMB Scan (if applicable)"
        pbar()

        pbar.text = "Running Post-Scan Tools"
        pbar()

        pbar.text = "Finalizing"
        pbar()

    print(Fore.GREEN + f"[✔] Scan complete. Report saved to {report_file}" + Style.RESET_ALL)

if __name__ == "__main__":
    main()
